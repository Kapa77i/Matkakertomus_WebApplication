@page "/login"
@inject HttpClient Http;
@using SharedLib;
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime


<h1>Kirjaudu</h1>
<div class="palsta">
<EditForm Model="@response" OnSubmit="@login">
    <div class="form-group">
        <label for="email">Sähköpostiosoite</label>
        <InputText @bind-Value="Email" type="email" class="form-control" id="email" placeholder="Sähköpostiosoite"/>
    </div>

    <div class="form-group">
        <label for="password">Salasana</label>
        <InputText @bind-Value="Password" type="password" class="form-control" id="password" placeholder="Salasana"/>
    </div>

    <button type="submit" class="btn btn-primary" >Kirjaudu sisään</button>
        <NavLink class="nav-link" href="signup">
            <span class="oi oi-flag" aria-hidden="true"></span> Rekisteröidy
        </NavLink>
</EditForm>
</div>

@code {


    //NÄMÄ USERNAME JA PASSWORD ON NYT VAAN MALLINA. MIETITÄÄN MITÄN NÄMÄ YMPPÄYTYY SIIHEN DBHEN Kirjautuminen tapahtuu sähköpostiosoitteen ja salasanan avulla.
    public string Email { get; set; }
    private string Password { get; set; }
    private matkaajaDTO? response = new matkaajaDTO();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (AuthUser.CurrentUser != null)
            {
                NavigationManager.NavigateTo("/user/" + AuthUser.CurrentUser.idmatkaaja);
            }
        }
    }

    private async Task login()

    {
        //response = await Http.GetFromJsonAsync<matkaajaDTO>("/auth?email=" + Email + "&pass=" + Password);

        //if (response != null)
        //{
        //    AuthUser.CurrentUser = response;
        //    NavigationManager.NavigateTo("/user/" + AuthUser.CurrentUser.idmatkaaja);
        //}else{
        //    await JSRuntime.InvokeAsync<string>("alert", "Invalid email or password");
        //}
        response = await Http.GetFromJsonAsync<matkaajaDTO>("/auth?email=" + Email + "&pass=" + Password);
        Console.WriteLine("Response: " + response);
        AuthUser.CurrentUser = response;
        if (AuthUser.CurrentUser != null)
        {
            Console.WriteLine("Response is not null, navigating to user page");
            NavigationManager.NavigateTo("/user/" + AuthUser.CurrentUser.idmatkaaja);
        }
        else
        {
            Console.WriteLine("Response is null, displaying error message");
            await JSRuntime.InvokeAsync<string>("alert", "Invalid email or password");
        }


    }
}
